name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install -e '.[dev]'
      - name: Lint & Format
        run: |
          black --check .
          isort --check-only .
          flake8 .

  type-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install -e '.[dev]'
      - name: Mypy
        run: mypy agentic_index_cli

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install -e '.[dev]'
      - name: Run tests with coverage
        env:
          PYTHONHASHSEED: 0
        run: pytest --cov=agentic_index_cli --cov-report=xml
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.xml

  pipeline-integrity:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install -e '.[dev]'
      - name: Run pipeline smoke tests
        env:
          CI_OFFLINE: '1'
        run: |
          pytest -q tests/test_pipeline_integration.py tests/test_refresh_category_integration.py

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install deps
        run: |
          pip install -r requirements.txt
          pip install -e '.[dev]'
      - name: Run bandit
        run: bandit -r agentic_index_cli -f json -o bandit.json
      - name: Upload bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit
          path: bandit.json

  badge-update:
    runs-on: ubuntu-latest
    needs: [tests, security-scan]
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            badge:
              - 'badges/**'
              - 'scripts/update_*badge*.py'
              - 'README.md'
      - name: Skip if no badge files changed
        if: steps.filter.outputs.badge != 'true'
        run: echo "Badge files unchanged" && exit 0
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: coverage
      - uses: actions/download-artifact@v4
        with:
          name: bandit
      - name: Update coverage badge
        run: python scripts/update_coverage_badge.py --check || python scripts/update_coverage_badge.py --write
      - name: Update security badge
        run: python scripts/update_security_badge.py --check bandit.json || python scripts/update_security_badge.py --write bandit.json
      - name: Auto-PR for badges
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "docs: update badges"
          branch: badge-update-${{ github.run_id }}
          base: ${{ github.event.repository.default_branch }}
          title: "docs: update badges"
          body: "Automated badge update"
          delete-branch: true

  audit-summary:
    needs: [lint-format, type-check, tests, pipeline-integrity, security-scan, badge-update]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Summarize CI status
        run: |
          echo '## CI Audit Summary' >> $GITHUB_STEP_SUMMARY
          echo '| Job | Result |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | ------ |' >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-format.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Check | ${{ needs.type-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.tests.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pipeline Integrity | ${{ needs.pipeline-integrity.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Badge Update | ${{ needs.badge-update.result }} |" >> $GITHUB_STEP_SUMMARY
